####
# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode
#
# Before building the container image run:
#
# ./mvnw package
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.jvm -t quarkus/infitech_lt-jvm .
#
# Then run the container using:
#
# docker run -i --rm -p 8080:8080 quarkus/infitech_lt-jvm
#
# If you want to include the debug port into your docker image
# you will have to expose the debug port (default 5005) like this :  EXPOSE 8080 5005
#
# Then run the container using :
#
# docker run -i --rm -p 8080:8080 quarkus/infitech_lt-jvm
#
# This image uses the `run-java.sh` script to run the application.
# This scripts computes the command line to execute your Java application, and
# includes memory/GC tuning.
# You can configure the behavior using the following environment properties:
# - JAVA_OPTS: JVM options passed to the `java` command (example: "-verbose:class")
# - JAVA_OPTS_APPEND: User specified Java options to be appended to generated options
#   in JAVA_OPTS (example: "-Dsome.property=foo")
# - JAVA_MAX_MEM_RATIO: Is used when no `-Xmx` option is given in JAVA_OPTS. This is
#   used to calculate a default maximal heap memory based on a containers restriction.
#   If used in a container without any memory constraints for the container then this
#   option has no effect. If there is a memory constraint then `-Xmx` is set to a ratio
#   of the container available memory as set here. The default is `50` which means 50%
#   of the available memory is used as an upper boundary. You can skip this mechanism by
#   setting this value to `0` in which case no `-Xmx` option is added.
# - JAVA_INITIAL_MEM_RATIO: Is used when no `-Xms` option is given in JAVA_OPTS. This
#   is used to calculate a default initial heap memory based on the maximum heap memory.
#   If used in a container without any memory constraints for the container then this
#   option has no effect. If there is a memory constraint then `-Xms` is set to a ratio
#   of the `-Xmx` memory as set here. The default is `25` which means 25% of the `-Xmx`
#   is used as the initial heap size. You can skip this mechanism by setting this value
#   to `0` in which case no `-Xms` option is added (example: "25")
# - JAVA_MAX_INITIAL_MEM: Is used when no `-Xms` option is given in JAVA_OPTS.
#   This is used to calculate the maximum value of the initial heap memory. If used in
#   a container without any memory constraints for the container then this option has
#   no effect. If there is a memory constraint then `-Xms` is limited to the value set
#   here. The default is 4096MB which means the calculated value of `-Xms` never will
#   be greater than 4096MB. The value of this variable is expressed in MB (example: "4096")
# - JAVA_DIAGNOSTICS: Set this to get some diagnostics information to standard output
#   when things are happening. This option, if set to true, will set
#  `-XX:+UnlockDiagnosticVMOptions`. Disabled by default (example: "true").
# - JAVA_DEBUG: If set remote debugging will be switched on. Disabled by default (example:
#    true").
# - JAVA_DEBUG_PORT: Port used for remote debugging. Defaults to 5005 (example: "8787").
# - CONTAINER_CORE_LIMIT: A calculated core limit as described in
#   https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt. (example: "2")
# - CONTAINER_MAX_MEMORY: Memory limit given to the container (example: "1024").
# - GC_MIN_HEAP_FREE_RATIO: Minimum percentage of heap free after GC to avoid expansion.
#   (example: "20")
# - GC_MAX_HEAP_FREE_RATIO: Maximum percentage of heap free after GC to avoid shrinking.
#   (example: "40")
# - GC_TIME_RATIO: Specifies the ratio of the time spent outside the garbage collection.
#   (example: "4")
# - GC_ADAPTIVE_SIZE_POLICY_WEIGHT: The weighting given to the current GC time versus
#   previous GC times. (example: "90")
# - GC_METASPACE_SIZE: The initial metaspace size. (example: "20")
# - GC_MAX_METASPACE_SIZE: The maximum metaspace size. (example: "100")
# - GC_CONTAINER_OPTIONS: Specify Java GC to use. The value of this variable should
#   contain the necessary JRE command-line options to specify the required GC, which
#   will override the default of `-XX:+UseParallelGC` (example: -XX:+UseG1GC).
# - HTTPS_PROXY: The location of the https proxy. (example: "myuser@127.0.0.1:8080")
# - HTTP_PROXY: The location of the http proxy. (example: "myuser@127.0.0.1:8080")
# - NO_PROXY: A comma separated lists of hosts, IP addresses or domains that can be
#   accessed directly. (example: "foo.example.com,bar.example.com")
#
###

FROM  ubuntu:18.04

ARG IM_VERSION=7.1.0-51

USER root 
# install app dependencies
#RUN apt-get update && apt-get install -y python3 python3-pip
#RUN pip install flask==2.1.*

RUN mkdir /java


ENV JAVA_HOME=/java/jdk-17
ENV AB_JOLOKIA_OFF=""
ENV JAVA_OPTS="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"

ENV JAVA_APP_JAR="/deployments/quarkus-run.jar"

ENV BUILD_VERSION="fedora 29b"

# Install Open-JDK-17


#RUN  dnf -y install curl wget

RUN apt update && apt upgrade
RUN apt  -y install wget
RUN apt -y install git



RUN wget https://download.java.net/openjdk/jdk17/ri/openjdk-17+35_linux-x64_bin.tar.gz
RUN tar xvf openjdk-17+35_linux-x64_bin.tar.gz

RUN mv jdk-17 $JAVA_HOME

RUN rm openjdk-17+35_linux-x64_bin.tar.gz

# Install ImageMagick

ENV app.imagemagic.avaiable=true


# inspired by https://gist.github.com/rjnienaber/af47fccb8410926ba7ea35f96c3b87fd

# remove bundled ImageMagick

#RUN apt -y install libheif-dev

#RUN  apt-get -y install libheif-examples

#RUN apt remove imagemagick -y

# install base dependencies
RUN apt-get install -y \
  build-essential \
  libde265-dev \
  libdjvulibre-dev \
  libfftw3-dev \
  libghc-bzlib-dev \
  libgoogle-perftools-dev \
  libgraphviz-dev \
  libgs-dev \
  libheif-dev \
  libjbig-dev \
  libjemalloc-dev \
  libjpeg-dev \
  liblcms2-dev \
  liblqr-1-0-dev \
  liblzma-dev \
  libopenexr-dev \
  libopenjp2-7-dev \
  libpango1.0-dev \
  libraqm-dev \
  libraw-dev \
  librsvg2-dev \
  libtiff-dev \
  libwebp-dev \
  libwmf-dev \
  libxml2-dev \
  libzip-dev \
  libzstd-dev

# installing
RUN git clone --depth 1 --branch 7.1.0-51 https://github.com/ImageMagick/ImageMagick.git

WORKDIR /ImageMagick

RUN ./configure \
	--with-bzlib=yes \
	--with-djvu=yes \
	--with-fftw=yes \
	--with-flif=yes \
	--with-fontconfig=yes \
	--with-freetype=yes \
	--with-gslib=yes \
	--with-gvc=yes \
	--with-heic=yes \
	--with-jbig=yes \
	--with-jemalloc=yes \
	--with-jpeg=yes \
	--with-lcms=yes \
	--with-lqr=yes \
	--with-lzma=yes \
	--with-magick-plus-plus=yes \
	--with-openexr=yes \
	--with-openjp2=yes \
	--with-pango=yes \
	--with-perl=yes \
	--with-png=yes \
	--with-raqm=yes \
	--with-raw=yes \
	--with-rsvg=yes \
	--with-tcmalloc=yes \
	--with-tiff=yes \
	--with-webp=yes \
	--with-wmf=yes \
	--with-x=yes \
	--with-xml=yes \
	--with-zip=yes \
	--with-zlib=yes \
	--with-zstd=yes \
    --with-gcc-arch=native 

RUN make -j 8
RUN make install
RUN ldconfig /usr/local/lib


# Rebuild  HIC
RUN apt-get -y update
RUN apt-get -y install build-essential autoconf git-core
#RUN apt-get -y build-dep imagemagick libde265 libheif
WORKDIR /usr/src/ 
RUN git clone https://github.com/strukturag/libde265.git 
RUN git clone https://github.com/strukturag/libheif.git 
WORKDIR /usr/src/libde265/ 
RUN ./autogen.sh 
RUN ./configure 
RUN make -j 8
RUN make install 
WORKDIR /usr/src/libheif/ 
RUN ./autogen.sh 
RUN ./configure 
RUN make -j 8 
RUN make install 

WORKDIR /ImageMagick

RUN ./configure \
	--with-bzlib=yes \
	--with-djvu=yes \
	--with-fftw=yes \
	--with-flif=yes \
	--with-fontconfig=yes \
	--with-freetype=yes \
	--with-gslib=yes \
	--with-gvc=yes \
	--with-heic=yes \
	--with-jbig=yes \
	--with-jemalloc=yes \
	--with-jpeg=yes \
	--with-lcms=yes \
	--with-lqr=yes \
	--with-lzma=yes \
	--with-magick-plus-plus=yes \
	--with-openexr=yes \
	--with-openjp2=yes \
	--with-pango=yes \
	--with-perl=yes \
	--with-png=yes \
	--with-raqm=yes \
	--with-raw=yes \
	--with-rsvg=yes \
	--with-tcmalloc=yes \
	--with-tiff=yes \
	--with-webp=yes \
	--with-wmf=yes \
	--with-x=yes \
	--with-xml=yes \
	--with-zip=yes \
	--with-zlib=yes \
	--with-zstd=yes \
    --with-gcc-arch=native 

RUN make -j 8
RUN make install
RUN ldconfig /usr/local/lib


# heic should appear in the Delegates line


# check
RUN identify --version

ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'

# We make four distinct layers so if there are application changes the library layers can be re-used
COPY --chown=185 target/quarkus-app/lib/ /deployments/lib/
COPY --chown=185 target/quarkus-app/*.jar /deployments/
COPY --chown=185 target/quarkus-app/app/ /deployments/app/
COPY --chown=185 target/quarkus-app/quarkus/ /deployments/quarkus/


ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$JAVA_HOME/bin

RUN java -version

EXPOSE 80

RUN apt -y install iputils-ping

#ENTRYPOINT ["java","${JAVA_OPTS}","-jar","${JAVA_APP_JAR}"]s
ENTRYPOINT ["java","-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager","-jar","/deployments/quarkus-run.jar"]
